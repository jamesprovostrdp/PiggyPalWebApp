@using PiggyPalWebApp.Models.Database
@model MainViewModel
@{
    ViewData["Title"] = "Dashboard - PiggyPal";
}

<!--Savings goal cards-->
<div class="goalCards d-flex gap-1 flex-column mt-3">
    <button class="btn btn-success" id="addGoalBtn" data-bs-toggle="modal" data-bs-target="#addGoalModal">Add Saving Goal</button>

    <div class="card border-primary mb-3 d-none" style="width: 18rem;">
        <div class="card-header">Header</div>

        <p class="goalDetails text-center">Target: $<span class="goalAmount">0.00</span> by <span class="goalDate">dd-mm-yyyy</span></p>
        <p class="goalDetails text-center">Suggested Monthly Payment: $<span class="monthlyPayment">0.00</span></p>

        <label>Deposit:</label>
        <input type="number" class="form-control mb-2" placeholder="Amount saved" />
        <input type="date" class="form-control mb-2" />

        <label class="text-center">Remaining: $<span class="remainingAmount">0.00</span></label>

        <div class="progress mt-2">
            <div class="progress-bar" style="width: 0%"></div>
        </div>
        <div class="d-flex justify-content-center gap-2">
            <button type="submit" class="btn btn-outline-success btn-sm mt-1 mb-1">Submit</button>
            <button type="button" class="btn btn-outline-danger btn-sm mb-1 mt-1 deleteGoal">Delete</button>
        </div>
    </div>

    <div class="card border-primary mb-3 d-none " style="width: 18rem;">
        <div class="card-header">Header</div>

        <p class="goalDetails text-center">Target: $<span class="goalAmount">0.00</span> by <span class="goalDate">dd-mm-yyyy</span></p>
        <p class="goalDetails text-center">Suggested Monthly Payment: $<span class="monthlyPayment">0.00</span></p>

        <label>Deposit:</label>
        <input type="number" class="form-control mb-2" placeholder="Amount saved" />
        <input type="date" class="form-control mb-2" />

        <label class="text-center">Remaining: $<span class="remainingAmount">0.00</span></label>

        <div class="progress mt-2">
            <div class="progress-bar" style="width: 0%"></div>
        </div>
        <div class="d-flex justify-content-center gap-2">
            <button type="submit" class="btn btn-outline-success btn-sm mb-1">Submit</button>
            <button type="button" class="btn btn-outline-danger btn-sm mb-1 deleteGoal">Delete</button>
        </div>
    </div>

</div>
<!--Savings goal cards-->


<!--Savings goal modal-->
<div class="modal fade" id="addGoalModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Savings Goal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                        <input type="text" id="goalTitleInput" class="form-control mb-2" placeholder="Goal Title" />
                        <input type="number" id="goalAmountInput" class="form-control mb-2" placeholder="Target Amount" />
                        <input type="date" id="goalDateInput" class="form-control mb-2" />
            </div>
            <div class="modal-footer">
                        <button class="btn btn-primary" id="saveGoalBtn" data-bs-dismiss="modal">Save Goal</button>
            </div>
        </div>
    </div>
</div>
<!--Savings goal modal-->



<!--Chart area-->
<div class="container-fluid chatSection">
    <div class="row">
        <div class="col-12 col-md-3 mb-3">
            <input type="date" class="form-control" id="inputDefault" />
        </div>

        <div class="col-12 col-md-9" id="chart">
            <div class="charts">
                <canvas id="Chart1"></canvas>
            </div>
        </div>
    </div>
</div>
<!--Chart area-->




<!--Income category modal-->
<!-- Income Modal -->
<div class="modal fade" id="addIncomeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Income Category</h5>
                <button type="button" class="btn-close"  data-bs-dismiss="modal"></button>
            </div>
            <form asp-controller="Category" asp-action="CreateIncomeCategory" method="POST" class="modal-body">
                <input asp-for="CategoryId" type="hidden" />

                <input asp-for="CategoryIsExpense" value="false" type="hidden" />

                <div class="input-group">
                    <input asp-for="CategoryDisplayName" type="text" id="incomeTitleInput" class="form-control mb-2" placeholder="Category Name" />
                </div>
                <div class="input-group">
                    <input asp-for="CategorySpendingLimit" type="number" id="incomeLimitInput" class="form-control mb-2" placeholder="Spending limit" />
                </div>
                <div class="input-group">
                    <button class="btn btn-primary" id="saveIncomeBtn" type="submit" data-bs-dismiss="modal">Save Category</button>
                </div>
            </form>
            
        </div>
    </div>
</div>

<!--Income Cateogry modal-->
<!--Expense Category modal-->
<div class="modal fade" id="addExpenseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Expense Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="expensesTitleInput" class="form-control mb-2" placeholder="Category Name" />
                <input type="number" id="expensesAmountInput" class="form-control mb-2" placeholder="Budget Amount" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="saveExpenseBtn" data-bs-dismiss="modal">Save Category</button>
            </div>
        </div>
    </div>
</div>
<!--Expense Category modal-->




<div class="sideBar justify-content-center">
    <ul class="nav nav-tabs " role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" data-bs-toggle="tab" href="#sidebarIncome" aria-selected="true" role="tab">Income</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" data-bs-toggle="tab" href="#sidebarExpenses" aria-selected="false" role="tab" tabindex="-1">Expenses</a>
        </li>
        <li class="nav-item" id="sidebarHistoryTab" role="presentation">
            <a class="nav-link" data-bs-toggle="tab" href="#sidebarHistory" aria-selected="false" role="tab" tabindex="-1">History</a>
        </li>
        <li id="importContainer">
            <form asp-action="ImportFile" method="post">
                <label for="formFile" class="form-label mt-4">Import CSV</label>
                <input class="form-control" type="file" id="formFile">
            </form>
        </li>
        <li>
            <button type="button" id="addNewCategoryBtn" class="btn btn-primary">+</button>
        </li>
    </ul>


    <div id="myTabContent" class="tab-content">


            <div class="tab-pane fade show active sidebar-section" id="sidebarIncome" role="tabpanel">
                <h5 class="mt-3 ml-3">Income</h5>
            @foreach (Category category in Model.Categories)
            {
                <div class="card bg-secondary mb-3 incomeCard" style="max-width: 20rem;">
                    <div class="card-header card-title">@category.DisplayName</div>
                    <div class="card-body">
                        <label>Date:</label>
                        <input type="date" class="form-control mb-2 incomeDateInput" required />

                        <label>Amount:</label>
                        <input type="number" class="form-control mb-2 incomeAmountInput" placeholder="0.00" required />

                        <div class="d-flex justify-content-center gap-2">
                            <button type="submit" class="btn btn-outline-success btn-sm">Submit</button>
                            <button type="button" class="btn btn-outline-danger btn-sm deleteCategory">Delete</button>
                        </div>
                    </div>
                </div>
            }
            </div>


        <div class="tab-pane fade sidebar-section" id="sidebarExpenses" role="tabpanel">
            <h5 class="mt-3 ml-3">Expenses</h5>

            <div class="card bg-secondary mb-3 expenseCard d-none" style="max-width: 20rem;">
                <div class="card-header card-title">Expense Title</div>
                <div class="card-body">
                    <label>Budget:</label>
                    <input type="number" class="form-control mb-2 expenseBudgetInput" placeholder="0.00" />

                    <label>Date:</label>
                    <input type="date" class="form-control mb-2 expenseDateInput" />

                    <label>Amount:</label>
                    <input type="number" class="form-control mb-2 expenseAmountInput" placeholder="0.00" />

                    <div class="d-flex justify-content-center gap-2">
                        <button type="submit" class="btn btn-outline-success btn-sm">Submit</button>
                        <button type="button" class="btn btn-outline-danger btn-sm deleteCategory">Delete</button>
                    </div>
                </div>
            </div>
        </div>




        <div class="tab-pane fade" id="sidebarHistory" role="tabpanel">
            <h5>History</h5>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Date</th>
                        <th scope="col">Category</th>
                        <th scope="col">Amount</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th scope="row">Date</th>
                        <td>Category</td>
                        <td>Amount</td>
                        <td><button class="badge bg-primary">Delete</button></td>
                    </tr>
                    <tr>
                        <th scope="row">Date</th>
                        <td>Category</td>
                        <td>Amount</td>
                        <td><button class="badge bg-primary">Delete</button></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>




<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

    //endpoint for income
    // document.addEventListener("click", function (e) {
    //     if (e.target && e.target.matches(".incomeCard .btn-outline-success"))
    //         const card = e.target.closest(".card");

    //     const title = card.querySelector(".card-title").textContent;
    //     const date = card.querySelector(".incomeDateInput").value;
    //     const amount = parseFloat(card.querySelector(".incomeAmountInput").value);

    //     const data = {
    //         DateOfRecord: date,
    //         Description: null,
    //         RecordAmount: amount,
    //         CategoryId: 1, Need James++++++++++++++++++++++++++++++++++++++++++++
    //     };

        // fetch("/IncomeExpense/AddRecord", {
        //     method: "POST",

        // } )

    //}
    







  

    //     document.getElementById("saveGoalBtn").addEventListener("click", function () {
    //     console.log("Save button clicked");
    //   const title = document.getElementById("goalTitleInput").value.trim();
    //     const amount = parseFloat(document.getElementById("goalAmountInput").value);
    //     const dateStr = document.getElementById("goalDateInput").value;

    //     if (!title || isNaN(amount) || !dateStr) {
    //         alert("Please fill in all fields.");
    //     return;
    //   }

    //     const goalDate = new Date(dateStr);
    //     const today = new Date();
    //     const diffMonths = Math.max(1, (goalDate.getFullYear() - today.getFullYear()) * 12 + goalDate.getMonth() - today.getMonth());
    //     const monthlyPayment = (amount / diffMonths).toFixed(2);

    //     Find the first hidden card
    //     const cards = document.querySelectorAll(".goalCards .card");
    //     console.log("Cards found:", cards);
    //     let filled = false;

    //     for (const card of cards) {
    //     if (card.classList.contains("d-none")) {
    //         card.classList.remove("d-none");

    //     card.querySelector(".card-header").textContent = title;
    //     card.querySelector(".goalAmount").textContent = amount.toFixed(2);
    //     card.querySelector(".goalDate").textContent = dateStr;
    //     card.querySelector(".monthlyPayment").textContent = monthlyPayment;
    //     card.querySelector(".remainingAmount").textContent = amount.toFixed(2);

    //     Reset progress bar
    //     const progressBar = card.querySelector(".progress-bar");
    //     progressBar.style.width = "0%";
    //     progressBar.textContent = "0%";

    //     filled = true;
    //     break;
    //     }
    //   }

    //     if (!filled) {
    //         alert("You can only have 2 goals at a time.");
    //   }

    //     Clear modal inputs
    //     document.getElementById("goalTitleInput").value = "";
    //     document.getElementById("goalAmountInput").value = "";
    //     document.getElementById("goalDateInput").value = "";
    // });


 
    // document.querySelectorAll(".deleteGoal").forEach(button => {
    //             button.addEventListener("click", function () {
    //                 const card = this.closest(".card");
    //                 if (confirm("Delete this goal?")) {
    //                     card.classList.add("d-none");

    //                     Reset fields
    //                     card.querySelector(".card-header").textContent = "Header";
    //                     card.querySelector(".goalAmount").textContent = "0.00";
    //                     card.querySelector(".goalDate").textContent = "dd-mm-yyyy";
    //                     card.querySelector(".monthlyPayment").textContent = "0.00";
    //                     card.querySelector(".remainingAmount").textContent = "0.00";

    //                     card.querySelector(".progress-bar").style.width = "0%";
    //                     card.querySelector(".progress-bar").textContent = "0%";
    //                 }
    //             });
    // });

    // Delegate submit button clicks inside goal cards
    // document.querySelectorAll(".goalCards .card").forEach(card => {
    //     const submitBtn = card.querySelector("button[type='submit']");

    //     submitBtn.addEventListener("click", function () {
    //         const depositInput = card.querySelector("input[type='number']");
    //         const depositAmount = parseFloat(depositInput.value);
    //         const goalAmount = parseFloat(card.querySelector(".goalAmount").textContent);
    //         const remainingSpan = card.querySelector(".remainingAmount");
    //         const progressBar = card.querySelector(".progress-bar");

    //         if (isNaN(depositAmount) || depositAmount <= 0) {
    //             alert("Please enter a valid deposit amount.");
    //             return;
    //         }

    //         let currentRemaining = parseFloat(remainingSpan.textContent);
    //         let newRemaining = currentRemaining - depositAmount;

    //         if (newRemaining < 0) newRemaining = 0;

    //         const progress = 100 - (newRemaining / goalAmount) * 100;

    //         Update the remaining and progress bar
    //         remainingSpan.textContent = newRemaining.toFixed(2);
    //         progressBar.style.width = `${progress}%`;
    //         progressBar.textContent = `${Math.round(progress)}%`;

    //         Clear the input after submission
    //         depositInput.value = "";
    //     });
    // });


 
    // Below is for side bar

        // Opens Modal for Category
        document.addEventListener("DOMContentLoaded", () => {
            const addBtn = document.getElementById("addNewCategoryBtn");

            if (addBtn) {
                addBtn.addEventListener("click", () => {
                    const activeTabLink = document.querySelector(".nav-tabs .nav-link.active");
                    if (!activeTabLink) return;

                    const activeTab = activeTabLink.getAttribute("href");

                    if (activeTab === "#sidebarIncome") {
                        new bootstrap.Modal(document.getElementById("addIncomeModal")).show();
                    } else if (activeTab === "#sidebarExpenses") {
                        new bootstrap.Modal(document.getElementById("addExpenseModal")).show();
                    }
                });
            }
        });




    //     document.getElementById("saveIncomeBtn").addEventListener("click", () => {
    //         const title = document.getElementById("incomeTitleInput").value.trim();
    //         const container = document.getElementById("sidebarIncome");
    //         const template = container.querySelector(".incomeCard.d-none");

    //         if (!title || !template) return;

    //         const clone = template.cloneNode(true);
    //         clone.classList.remove("d-none");
    //         clone.querySelector(".card-title").textContent = title;

    //         container.appendChild(clone);

    //         Only clear what actually exists
    //         document.getElementById("incomeTitleInput").value = "";
    //     });


    //         document.querySelectorAll(".incomeCard .btn-outline-success").forEach(button => {
    //             button.addEventListener("click", function () {
    //                 const card = this.closest(".card");
    //                 const dateInput = card.querySelector(".incomeDateInput");
    //                 const amountInput = card.querySelector(".incomeAmountInput");

    //                 const date = dateInput.value;
    //                 const amount = parseFloat(amountInput.value);

    //                 if (!date || isNaN(amount) || amount <= 0) {
    //                     alert("Please enter a valid date and amount.");
    //                     return;
    //                 }

    //                 Replace inputs with display
    //                 dateInput.replaceWith(`Date: <span>${date}</span><br>`);
    //                 amountInput.replaceWith(`Amount: $<span>${amount.toFixed(2)}</span><br>`);

    //                 this.remove(); remove submit button
    //             });
    //         });

    // document.getElementById("saveExpenseBtn").addEventListener("click", () => {
    //     const title = document.getElementById("goalTitleInput").value.trim();
    //     const budget = parseFloat(document.getElementById("goalAmountInput").value);
    //     const container = document.getElementById("sidebarExpenses"); <- match this
    //     const template = container.querySelector(".expenseCard.d-none");

    //     if (!title || isNaN(budget) || !template) return;

    //     const clone = template.cloneNode(true);
    //     clone.classList.remove("d-none");
    //     clone.querySelector(".card-title").textContent = title;
    //     clone.querySelector(".expenseBudgetInput").value = budget.toFixed(2);

    //     container.appendChild(clone);

    //     document.getElementById("goalTitleInput").value = "";
    //     document.getElementById("goalAmountInput").value = "";
    // });




    //         document.addEventListener("click", function (e) {
    //             if (e.target && e.target.matches(".expensesCard .btn-outline-success")) {
    //                 const card = e.target.closest(".expensesCard");
    //                 const dateInput = card.querySelector(".expensesDateInput");
    //                 const amountInput = card.querySelector(".expensesAmountInput");

    //                 const date = dateInput.value;
    //                 const amount = parseFloat(amountInput.value);

    //                 if (!date || isNaN(amount) || amount <= 0) {
    //                     alert("Please enter a valid date and amount.");
    //                     return;
    //                 }

    //                 dateInput.replaceWith(`Date: <span>${date}</span><br>`);
    //                 amountInput.replaceWith(`Amount: $<span>${amount.toFixed(2)}</span><br>`);
    //                 e.target.remove(); remove the submit button
    //             }
    //         });


    // document.getElementById("saveExpenseBtn").addEventListener("click", () => {
    //     const title = document.getElementById("expensesTitleInput").value.trim();
    //     const container = document.getElementById("sidebarExpenses");
    //     const template = container.querySelector(".expenseCard.d-none");

    //     if (!title || !template) return;

    //     const clone = template.cloneNode(true);
    //     clone.classList.remove("d-none");
    //     clone.querySelector(".card-title").textContent = title;

    //     container.appendChild(clone);

    //     Only clear what actually exists
    //     document.getElementById("expensesTitleInput").value = "";
    // });


    // document.querySelectorAll(".expenseCard .btn-outline-success").forEach(button => {
    //     button.addEventListener("click", function () {
    //         const card = this.closest(".card");
    //         const dateInput = card.querySelector(".expenseDateInput");
    //         const amountInput = card.querySelector(".expenseAmountInput");

    //         const date = dateInput.value;
    //         const amount = parseFloat(amountInput.value);

    //         if (!date || isNaN(amount) || amount <= 0) {
    //             alert("Please enter a valid date and amount.");
    //             return;
    //         }

    //         Replace inputs with display
    //         dateInput.replaceWith(`Date: <span>${date}</span><br>`);
    //         amountInput.replaceWith(`Amount: $<span>${amount.toFixed(2)}</span><br>`);

    //         this.remove(); remove submit button
    //     });
    // });



    const records = [
        { Date: "2024-03-01", Description: "Test", RecordAmount: 50 },
        { Date: "2024-03-02", Description: "Another", RecordAmount: 100 }
    ];

    if (records.length === 0) {
        document.getElementById("Chart1").insertAdjacentHTML('afterend', '<p>No data to display.</p>');
    } else {
        const labels = records.map(r => r.Date + ' - ' + r.Description);
        const data = records.map(r => r.RecordAmount);

        const ctx = document.getElementById('Chart1').getContext('2d');

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Record Amount',
                    data: data,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
    


</script>