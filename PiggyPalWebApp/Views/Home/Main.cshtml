@using PiggyPalWebApp.Models.Database
@model MainViewModel
@{
    ViewData["Title"] = "Dashboard - PiggyPal";
}
<body>
<!--Savings goal cards-->
<div class="goalCards d-flex gap-1 flex-column mt-3">
   <!--  <button class="btn btn-success" id="addGoalBtn" data-bs-toggle="modal" data-bs-target="#addGoalModal">Add Saving Goal</button>-->

    <div class="card border-primary mb-3 d-none" style="width: 18rem;">
        <div class="card-header">Header</div>

        <p class="goalDetails text-center">Target: $<span class="goalAmount">0.00</span> by <span class="goalDate">dd-mm-yyyy</span></p>
        <p class="goalDetails text-center">Suggested Monthly Payment: $<span class="monthlyPayment">0.00</span></p>

        <label>Deposit:</label>
        <input type="number" class="form-control mb-2" placeholder="Amount saved" />
        <input type="date" class="form-control mb-2" />

        <label class="text-center">Remaining: $<span class="remainingAmount">0.00</span></label>

        <div class="progress mt-2">
            <div class="progress-bar" style="width: 0%"></div>
        </div>
        <div class="d-flex justify-content-center gap-2">
            <button type="submit" class="btn btn-outline-success btn-sm mt-1 mb-1">Submit</button>
            <button type="button" class="btn btn-outline-danger btn-sm mb-1 mt-1 deleteGoal">Delete</button>
        </div>
    </div>

    <div class="card border-primary mb-3 d-none " style="width: 18rem;">
        <div class="card-header">Header</div>

        <p class="goalDetails text-center">Target: $<span class="goalAmount">0.00</span> by <span class="goalDate">dd-mm-yyyy</span></p>
        <p class="goalDetails text-center">Suggested Monthly Payment: $<span class="monthlyPayment">0.00</span></p>

        <label>Deposit:</label>
        <input type="number" class="form-control mb-2" placeholder="Amount saved" />
        <input type="date" class="form-control mb-2" />

        <label class="text-center">Remaining: $<span class="remainingAmount">0.00</span></label>

        <div class="progress mt-2">
            <div class="progress-bar" style="width: 0%"></div>
        </div>
        <div class="d-flex justify-content-center gap-2">
            <button type="submit" class="btn btn-outline-success btn-sm mb-1">Submit</button>
            <button type="button" class="btn btn-outline-danger btn-sm mb-1 deleteGoal">Delete</button>
        </div>
    </div>

</div>
<!--Savings goal cards-->


<!--Savings goal modal-->
<div class="modal fade" id="addGoalModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Savings Goal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="goalTitleInput" class="form-control mb-2" placeholder="Goal Title" />
                <input type="number" id="goalAmountInput" class="form-control mb-2" placeholder="Target Amount" />
                <input type="date" id="goalDateInput" class="form-control mb-2" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="saveGoalBtn" data-bs-dismiss="modal">Save Goal</button>
            </div>
        </div>
    </div>
</div>
<!--Savings goal modal-->



<!--Chart area-->
<div class="container-fluid chatSection">
        <div class="mb-3 d-flex align-items-center gap-2">
            <label for="chartTypeSelect" class="form-label mb-0">Chart Type:</label>
            <select id="chartTypeToggle" class="form-select" style="width: 200px;">
                <option value="bar">Income & Expenses Over Time</option>
                <option value="pie">Total Expenses by Category</option>
                <option value="budget">Budget Tracker</option>

            </select>
        </div>

    <div class="row">
        <div class="col-12 col-md-9" id="chart">
            <div class="charts">
                <canvas id="Chart1"></canvas>
            </div>
        </div>
    </div>
</div>
<!--Chart area-->




<!--Income category modal-->
<!-- Income Modal -->
<div class="modal fade" id="addIncomeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Income Category</h5>
                <button type="button" class="btn-close"  data-bs-dismiss="modal"></button>
            </div>
            <form asp-controller="Category" asp-action="CreateIncomeCategory" method="POST" class="modal-body">
                <input asp-for="CategoryId" type="hidden" />

                <input asp-for="CategoryIsExpense" value="false" type="hidden" />

                <div class="input-group">
                    <input asp-for="CategoryDisplayName" type="text" id="incomeTitleInput" class="form-control mb-2" placeholder="Category Name" />
                </div>
                <div class="input-group">
                    <button class="btn btn-primary" id="saveIncomeBtn" type="submit" data-bs-dismiss="modal">Save Category</button>
                </div>
            </form>

        </div>
    </div>
</div>
<!--Income Cateogry modal-->

<!--Expense Category modal-->
<div class="modal fade" id="addExpenseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Expense Category</h5>
                <button type="button" class="btn-close"  data-bs-dismiss="modal"></button>
            </div>
            <form asp-controller="Category" asp-action="CreateExpenseCategory" method="POST" class="modal-body">
                <input asp-for="CategoryId" type="hidden" />

                <input asp-for="CategoryIsExpense" value="true" type="hidden" />

                <div class="input-group">
                    <input asp-for="CategoryDisplayName" type="text" id="expenseTitleInput" class="form-control mb-2" placeholder="Category Name" />
                </div>
                <div class="input-group">
                    <input asp-for="CategorySpendingLimit" type="number" id="expenseBudgetInput" class="form-control mb-2" placeholder="Budget Amount" />
                </div>
                <div class="input-group">
                    <button class="btn btn-primary" id="saveExpenseBtn" type="submit" data-bs-dismiss="modal">Save Category</button>
                </div>
            </form>

        </div>
    </div>
</div>

<!--Expense Category modal-->




<div class="sideBar justify-content-center">
    <ul class="nav nav-tabs " role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" data-bs-toggle="tab" href="#sidebarIncome" aria-selected="true" role="tab">Income</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" data-bs-toggle="tab" href="#sidebarExpenses" aria-selected="false" role="tab" tabindex="-1">Expenses</a>
        </li>
        <li class="nav-item" id="sidebarHistoryTab" role="presentation">
            <a class="nav-link" data-bs-toggle="tab" href="#sidebarHistory" aria-selected="false" role="tab" tabindex="-1">History</a>
        </li>
        <li id="importContainer">
            <form enctype="multipart/form-data" asp-controller="File" asp-action="ReadFileAndWriteRecords" method="post" runat="server">
                <label for="formFile" class="form-label mt-4">Import CSV</label>
                <input class="form-control" asp-for="FormFile" type="file" id="formFile">
                <button type="submit" class="btn btn-outline-success btn-sm">Submit</button>
            </form>
        </li>
        <li>
            <button type="button" id="addNewCategoryBtn" class="btn btn-primary">+</button>
        </li>
    </ul>


    <div id="myTabContent" class="tab-content">


            <div class="tab-pane fade show active sidebar-section" id="sidebarIncome" role="tabpanel">
                <h5 class="mt-3 text-center">Income</h5>
                <div class="d-flex flex-column align-items-center">
                    @foreach (var category in Model.Categories.Where(c => !c.IsExpense))
                    {
                        <div class="card bg-secondary mb-3 incomeCard" data-category-id="@category.CategoryId" style="max-width: 20rem;">
                            <div class="card-header card-title">@category.DisplayName</div>
                            <div class="card-body">
                                <label>Date:</label>
                                <input type="date" class="form-control mb-2 incomeDateInput recordDateInput" required />

                                <label>Amount:</label>
                                <input type="number" class="form-control mb-2 incomeAmountInput recordAmountInput" placeholder="0.00" required />

                                <div class="d-flex justify-content-center gap-2">
                                    <button type="submit" class="btn btn-outline-success btn-sm">Submit</button>
                                    <button type="button" class="btn btn-outline-danger btn-sm deleteCategoryBtn" data-id="@category.CategoryId">Delete</button>
                                </div>
                            </div>
                        </div>
                    }
                </div> 
            </div> 


            <div class="tab-pane fade sidebar-section" id="sidebarExpenses" role="tabpanel">
                <h5 class="mt-3 text-center">Expenses</h5>
                <div class="d-flex flex-column align-items-center">
                    @foreach (var category in Model.Categories.Where(c => c.IsExpense))
                    {
                        <div class="card bg-secondary mb-3 expenseCard" data-category-id="@category.CategoryId" style="max-width: 20rem;">
                            <div class="card-header card-title">@category.DisplayName</div>
                            <div class="card-body">
                                <label>Budget:</label>
                                <input type="number" class="form-control mb-2 expenseBudgetInput recordBudgetInput" placeholder="0.00"
                                       value="@(category.SpendingLimit?.ToString("0.00") ?? "")" readonly />

                                <label>Date:</label>
                                <input type="date" class="form-control mb-2 expenseDateInput recordDateInput" />

                                <label>Amount:</label>
                                <input type="number" class="form-control mb-2 expenseAmountInput recordAmountInput" placeholder="0.00" />

                                <div class="d-flex justify-content-center gap-2">
                                    <button type="submit" class="btn btn-outline-success btn-sm">Submit</button>
                                    <button type="button" class="btn btn-outline-danger btn-sm deleteCategoryBtn" data-id="@category.CategoryId">Delete</button>
                                </div>
                            </div>
                        </div>
                    }
                </div> 
            </div> 



        <div class="tab-pane fade" id="sidebarHistory" role="tabpanel">
            <h5>History</h5>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Date</th>
                        <th scope="col">Category</th>
                        <th scope="col">Amount</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Record record in Model.Records)
                    {
                        <tr>
                            <th scope="row">
                                @record.DateOfRecord.ToShortDateString()
                            </th>
                            <td>
                                @if (record.Description is null && record.Category is not null)
                                {
                                    @record.Category.DisplayName
                                }
                                else
                                {
                                    @record.Description
                                }
                            </td>
                                <td class="@(record.RecordAmount < 0 ? "text-danger" : "")">
                                @record.RecordAmount
                                </td>
                                <td><button class="badge bg-primary deleteRecordBtn" data-id="@record.RecordId">Delete</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

</body>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 


<script>


    // Below is for side bar

        // Opens Modal for Category
        document.addEventListener("DOMContentLoaded", () => {
            const addBtn = document.getElementById("addNewCategoryBtn");

            if (addBtn) {
                addBtn.addEventListener("click", () => {
                    const activeTabLink = document.querySelector(".nav-tabs .nav-link.active");
                    if (!activeTabLink) return;

                    const activeTab = activeTabLink.getAttribute("href");

                    if (activeTab === "#sidebarIncome") {
                        new bootstrap.Modal(document.getElementById("addIncomeModal")).show();
                    } else if (activeTab === "#sidebarExpenses") {
                        new bootstrap.Modal(document.getElementById("addExpenseModal")).show();
                    }
                });
            }
        });

    document.addEventListener("click", async (e) => {
        if (e.target && e.target.matches(".btn-outline-success")) {
            const card = e.target.closest(".card");
            const date = card.querySelector(".recordDateInput")?.value;
            const categoryId = card.getAttribute("data-category-id");

            const isExpense = card.classList.contains("expenseCard");
            let amount = parseFloat(card.querySelector(".recordAmountInput")?.value);

            if (!date || isNaN(amount) || amount <= 0) {
                alert("Please enter a valid date and amount.");
                return;
            }

            if (isExpense) {
                amount = -Math.abs(amount);
            }

            const formData = new FormData();
            formData.append("DateOfRecord", date);
            formData.append("RecordAmount", amount);
            formData.append("CategoryId", categoryId);

            const response = await fetch("/Home/AddRecord", {
                method: "POST",
                body: formData
            });

            if (response.ok) {
                console.log("Record added successfully");
                location.reload(); 
            } else {
                console.error("Failed to add record");
            }
        }
    });

    document.addEventListener("click", async (e) => {
        if (e.target && e.target.classList.contains("deleteCategoryBtn")) {
            const categoryId = e.target.getAttribute("data-id");

            const confirmed = confirm("Are you sure you want to delete this category?");
            if (!confirmed) return;

            const response = await fetch("/Home/DeleteCategory", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(parseInt(categoryId))
            });

            if (response.ok) {
                // Remove card visually
                e.target.closest(".card").remove();
            } else {
                alert("Something went wrong while deleting the category.");
            }
        }
    });


    document.addEventListener("click", async (e) => {
        if (e.target && e.target.classList.contains("deleteRecordBtn")) {
            const recordId = e.target.getAttribute("data-id");

            const confirmed = confirm("Are you sure you want to delete this record?");
            if (!confirmed) return;

            const response = await fetch("/Home/DeleteRecord", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector("input[name='__RequestVerificationToken']")?.value
                },
                body: JSON.stringify({ recordId })
            });

            if (response.ok) {
                console.log("Record deleted");
                location.reload(); // Reload to update history + chart
            } else {
                console.error("Failed to delete record");
                alert("Something went wrong. Try again.");
            }
        }
    });




    
    let currentChart = null;
    let pieData = [];

    // bar chart
    function renderBarChart(data) {
        const ctx = document.getElementById('Chart1').getContext('2d');
        const labels = data.map(r => r.date);
        const values = data.map(r => r.amount);

        return new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Record Amount',
                    data: values,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });
    }

    // pie chart
    function renderPieChart(data) {
        const ctx = document.getElementById('Chart1').getContext('2d');
        const labels = data.map(d => d.category);
        const values = data.map(d => d.total);

        return new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    data: values,
                    backgroundColor: [
                        '#FF6384', '#36A2EB', '#FFCE56', '#8E44AD', '#27AE60', '#F39C12'
                    ],
                    borderColor: '#fff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    function renderBudgetChart(data) {
        const labels = data.map(d => d.category);
        const budgetValues = data.map(d => d.budget);
        const spentValues = data.map(d => Math.abs(d.spent));

        const ctx = document.getElementById("Chart1").getContext("2d");

        return new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Budget',
                        data: budgetValues,
                        backgroundColor: 'rgba(198, 134, 255, 0.6)', 
                        borderColor: 'rgba(198, 134, 255, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Spent',
                        data: spentValues,
                        backgroundColor: 'rgba(255, 99, 132, 0.6)', 
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }



    function loadChart(type, data) {
        if (currentChart) {
            currentChart.destroy();
        }

        const chartCanvas = document.getElementById("Chart1");
        if (type === 'pie') {
            chartCanvas.style.maxWidth = "400px";
            chartCanvas.style.margin = "0 auto";
        } else {
            chartCanvas.style.maxWidth = "100%";
            chartCanvas.style.margin = "initial";
        }

        if (type === 'pie') {
            currentChart = renderPieChart(data);
        } else if (type === 'budget') {
            currentChart = renderBudgetChart(data); 
        } else {
            currentChart = renderBarChart(data);
        }
    }



  
    let barData = [];
    
    fetch("/chart-data")
        .then(res => res.json())
        .then(data => {
            barData = data;
            loadChart("bar", barData); 
        });

    fetch("/chart-data/expenses-by-category")
        .then(res => res.json())
        .then(data => {
            pieData = data;
        });

    fetch("/chart-data/budget-summary")
        .then(res => res.json())
        .then(data => {
            console.log("Fetched Data:", data); 
        });


    // Toggle for charts
    document.getElementById("chartTypeToggle").addEventListener("change", function () {
        const selected = this.value;
        if (selected === "bar") {
            fetch("/chart-data")
                .then(res => res.json())
                .then(data => {
                    loadChart("bar", data);
                });
        } else if (selected === "pie") {
            fetch("/chart-data/expenses-by-category")
                .then(res => res.json())
                .then(data => {
                    loadChart("pie", data);
                });
        } else if (selected === "budget") {
            fetch("/chart-data/budget-summary")
                .then(res => res.json())
                .then(data => {
                    loadChart("budget", data);
                });
        }
    });
</script>